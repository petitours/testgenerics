const prototype = Object.freeze({
  offset: 0,
  timestamp: 0,
  get date () {
    return new Date(this).getDate()
  },
  get day () {
    return new Date(this).getDay()
  },
  get month () {
    return new Date(this).getMonth()
  },
  get year () {
    return new Date(this).getFullYear()
  },
  get hours () {
    return new Date(this).getHours()
  },
  get minutes () {
    return new Date(this).getMinutes()
  },
  get seconds () {
    return new Date(this).getSeconds()
  },
  get millis () {
    return new Date(this).getMilliseconds()
  },
  get week () {
    const date = new Date(this)

    date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7))

    return [
      date.getUTCFullYear(),
      ~~(((date - new Date(date.getUTCFullYear(), 0, 1)) / 86400000 + 1) / 7 + 1)
    ]
  },
  toISOString () {
    return new Date(this).toISOString()
  }
})

genre, toISOWithOffsetString()

export default function date (...params) {
  const date = new Date(...params)

  return Object.freeze(Object.create(prototype, Object.getOwnPropertyDescriptors({
    offset: date.getTimezoneOffset(),
    timestamp: +date
  })))
}

  addDays (days) {
    return date(new Date(this).setDate(days + this.date))
  }

usage 

import date from '...'

const result = date()
